type Counter @entity {
  id: ID!
  updateSpec: BigInt
  bid: BigInt
  RegularRequest: BigInt
  assignedFunds: BigInt
  dme: BigInt
  planterPayments: BigInt
  withdraws: BigInt
  treeFund: BigInt
  treeSpecs: BigInt
  communityGift: BigInt
}

type Planter @entity {
  id: ID!
  planterType: BigInt!
  status: BigInt!
  countryCode: String
  score: BigInt
  supplyCap: BigInt

  longitude: BigInt
  latitude: BigInt
  memberOf: Planter!
  members: [Planter!]! @derivedFrom(field: "memberOf")
  invitedBy: Planter
  refferers: [Planter!]! @derivedFrom(field: "invitedBy")
  organizationShare: BigInt
  memberCount: BigInt!
  invitedCount: BigInt!
  balance: BigInt
  createdAt: BigInt!
  updatedAt: BigInt!
  trees: [Tree!]! @derivedFrom(field: "planter")

  plantedCount: BigInt!
  verifiedPlantedCount: BigInt!
  totalOrganizationPlantedCount: BigInt!
  totalOrganizationVerifiedPlantedCount: BigInt!
  regularPlantedCount: BigInt!
  regularVerifiedPlantedCount: BigInt!
  organizationRegularPlantedCount: BigInt!
  organizationRegularVerifiedPlantedCount: BigInt!
}

type Tree @entity {
  id: ID!
  planter: Planter
  funder: Funder
  species: BigInt
  countryCode: String
  saleType: BigInt
  treeStatus: BigInt
  plantDate: BigInt
  birthDate: BigInt
  treeUpdates: [TreeUpdate!] @derivedFrom(field: "tree")
  lastUpdate: TreeUpdate!
  treeAttribute: TreeAttribute
  treeSpecs: String!
  treeSpecsEntity: TreeSpec
  requestId: String
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TreeSpec @entity {
  id: ID!
  name: String!
  description: String!
  externalUrl: String!
  imageFs: String!
  imageHash: String!
  symbolFs: String!
  symbolHash: String!
  # description: String!
  animationUrl: String!
  diameter: BigInt!
  latitude: String!
  longitude: String!
  attributes: String!
}

type TreeUpdate @entity {
  id: ID!
  tree: Tree!
  updateDate: BigInt
  status: BigInt
  treeSpecs: String
  type: Boolean
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TempTree @entity {
  id: ID!
  planter: Planter!
  countryCode: String!
  status: BigInt
  plantDate: BigInt
  birthDate: BigInt
  treeSpecs: String!
  treeSpecsEntity: TreeSpec
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Funder @entity {
  id: ID!
  trees: [Tree!] @derivedFrom(field: "funder")
  treeCount: BigInt!
  spentWeth: BigInt!
  spentDai: BigInt
  rank: BigInt
  lastRequestId: String

  auctionCount: BigInt
  regularCount: BigInt
  incrementalCount: BigInt
  auctionSpent: BigInt
  incrementalSpent: BigInt
  regularSpent: BigInt
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Auction @entity {
  id: ID!
  tree: Tree!
  initialPrice: BigInt
  priceInterval: BigInt
  startDate: BigInt
  endDate: BigInt
  winner: Funder
  highestBid: BigInt
  isActive: Boolean
  bids: [Bid!] @derivedFrom(field: "auction")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type Bid @entity {
  id: ID!
  auction: Auction
  bidder: String
  bid: BigInt
  createdAt: BigInt!
}



type TreeAttribute @entity {
  id: ID!
  buyerRank: BigInt
}

# type TreeWithAttributeProblem @entity {
#   id: ID!
#   tree: Tree!
# }

# type IncrementalSell @entity {
#   id: ID!
#   startTree: Tree!
#   endTree: Tree!
#   startTreeId: BigInt
#   endTreeId: BigInt
#   initialPrice: BigInt
#   increaseStep: BigInt
#   increaseRatio: BigInt
# }

# # type BatchRegularTreeRequest @entity {
# #   id: ID!
# #   count: BigInt
# #   buyer: Funder!
# #   amount: BigInt
# #   trees: [Tree!]
# # }

# type FundDistribution @entity {
#   id: ID!
#   planterFund: BigInt
#   referralFund: BigInt
#   treeResearch: BigInt
#   localDevelop: BigInt
#   rescueFund: BigInt
#   treejerDevelop: BigInt
#   reserveFund1: BigInt
#   reserveFund2: BigInt
#   exists: BigInt
# }

# type AssignedFundDistribution @entity {
#   id: ID!
#   distributionModel: FundDistribution
# }

# type TotalFund @entity {
#   id: ID!
#   planterFund: BigInt
#   referralFund: BigInt
#   treeResearch: BigInt
#   localDevelop: BigInt
#   rescueFund: BigInt
#   treejerDevelop: BigInt
#   reserveFund1: BigInt
#   reserveFund2: BigInt
#   totalBalance: BigInt
# }

# type TreeFund @entity {
#   id: ID!
#   tree: Tree!
#   distributionModel: FundDistribution!
#   amount: BigInt!
#   date: BigInt!
# }

# type DistributionModelError @entity {
#   id: ID!
#   description: String
#   date: BigInt
# }

# type PlanterPayment @entity {
#   id: ID!
#   tree: Tree!
#   planter: Planter!
#   date: BigInt
#   amount: BigInt
#   isRefferal: Boolean!
# }

# type Withdraw @entity {
#   id: ID!
#   type: String!
#   reason: String
#   destAddress: String!
#   amount: BigInt!
#   date: BigInt
# }

# type TreePlanterFinance @entity {
#   id: ID!
#   planterFund: BigInt
#   referalFund: BigInt
#   planterPaid: BigInt
#   refferalPaid: BigInt
# }

# type TotalPlanterFund @entity {
#   id: ID!
#   planterFund: BigInt
#   referalFund: BigInt
#   localDevelopFund: BigInt
#   totalBalance: BigInt
# }

type GlobalData @entity {
  id: ID!
  totalPlantedTrees: BigInt!
  totalVerifiedTrees: BigInt!
  totalUpdates: BigInt!
  totalVerifiedUpdates: BigInt!
  totalRegularTreesUnderReview: BigInt!
  totalRegularTreeSellCount: BigInt!
  totalAuctionTreeSellCount: BigInt!
  totalIncrementalSellCount: BigInt!
  planterCount: BigInt!
  organizationCount: BigInt!
  independentPlanterCount: BigInt!
  funderCount: BigInt!
  ownedTreeCount: BigInt!
  totalRegularTreeSellAmount: BigInt!
  totalAuctionTreeSellAmount: BigInt!
  totalIncrementalSellAmount: BigInt!
  totalClaimedGiftTrees: BigInt!
  regularTreePrice: BigInt!
  lastIncrementalSold: BigInt!
  prevIncrementalPrice: BigInt!
  nowIncrementalPrice: BigInt!
  nextIncremetalPrice: BigInt!
  communityGiftPlanterFund: BigInt!
  communityGiftReferralFund: BigInt!
}

# type CommunityGifts @entity {
#   id: ID!
#   giftee: Funder!
#   symbol: BigInt
#   claimed: Boolean
#   treeId: Tree!
#   expireDate: BigInt
#   transferred: BigInt
#   transferAddress: Funder!
# }

# type RegularRequest @entity {
#   id: ID!
#   funder: Funder!
#   count: BigInt
#   amount: BigInt
#   date: BigInt
# }
